
//IQ
float3 hash33(float3 p3)
{
    p3 = frac(p3 * float3(.1031,.11369,.13787));
    p3 += dot(p3, p3.yxz+19.19);
    return -1.0 + 2.0 * frac(float3(p3.x+p3.y, p3.x+p3.z, p3.y+p3.z)*p3.zyx);
}
float snoise3(float3 p)
{
    static const float K1 = 0.333333333;
    static const float K2 = 0.166666667;
    
    float3 i = floor(p + (p.x + p.y + p.z) * K1);
    float3 d0 = p - (i - (i.x + i.y + i.z) * K2);
    
    float3 e = step(float3(0., 0., 0.), d0 - d0.yzx);
    float3 i1 = e * (1.0 - e.zxy);
    float3 i2 = 1.0 - e.zxy * (1.0 - e);
    
    float3 d1 = d0 - (i1 - K2);
    float3 d2 = d0 - (i2 - K1);
    float3 d3 = d0 - 0.5;
    
    float4 h = max(0.6 - float4(dot(d0, d0), dot(d1, d1), dot(d2, d2), dot(d3, d3)), 0.0);
    float4 n = h * h * h * h * float4(dot(d0, hash33(i)), dot(d1, hash33(i + i1)), dot(d2, hash33(i + i2)), dot(d3, hash33(i + 1.0)));
    
    return dot(float4(31.316,31.316,31.316,31.316), n);
}


static const float innerRadius = 0.02;
static const float noiseScale = 0.95;

float light(float intensity, float attenuation, float dist)
{
    return intensity / (1.0 + dist * attenuation);
}

float3 draw(in float2 vUv, float time )
{
    float2 uv = vUv;
    float len = exp(-3*length(uv));
    float v0;
    float r0, d0, n0;
    float3 col = 0;
    
    // ring
    float3 sn = float3(uv.xy * noiseScale, time * 0.5);
    n0 = snoise3(sn) * 0.5 + 0.5;
    r0 = lerp(lerp(innerRadius, .5, 0.4), lerp(innerRadius, 1.0, 0.6), n0);
    d0 = distance(uv, r0 / len * uv.x%.85);
    v0 = light(1.0, 60.0, d0);
 
    col = v0;

    return col;
}



float4 ${signature}(float time){
    float2 uv = streams.TexCoord*2-1;//(fragCoord*2.-iResolution.xy)/iResolution.y;
    uv = uv;
    float3 col=0;
    col = draw(uv, time);
    return float4(col*1.5, 1);
}